from datetime import timedelta

import requests

from odoo import models, fields, api
from odoo.exceptions import ValidationError
from datetime import timedelta

from odoo.tools import unique


class Property(models.Model):
    _name = "property"
    _description = 'New Property'  # The display name in chatter and any place
    _inherit = ['mail.thread', 'mail.activity.mixin']

    ref = fields.Char(default='New', readonly=1)
    name = fields.Char(translate=True, size=50)
    nick_name = fields.Char()
    # _sql_constraints = [
    #     ('unique_name', 'unique(name)', 'This name is already existed')
    # ]
    description = fields.Text(tracking=1)
    postcode = fields.Char(required=1, size=6)
    date_availability = fields.Date(tracking=1)  # to track date
    expected_price = fields.Float()
    selling_price = fields.Float()
    diff = fields.Float(compute='_compute_diff', store=1)
    expected_selling_date = fields.Date(tracking=1)
    is_late = fields.Boolean()
    bedrooms = fields.Integer()
    living_area = fields.Integer()
    facades = fields.Integer()
    garage = fields.Boolean()
    garden = fields.Boolean()
    garden_area = fields.Integer()
    garden_orientation = fields.Selection([
        ('north', 'North'),
        ('south', 'South'),
        ('east', 'East'),
        ('west', 'West')
    ], default='north')

    owner_id = fields.Many2one('owner')
    tag_ids = fields.Many2many('tag')
    owner_address = fields.Char(related='owner_id.address', readonly=False, store=True)
    owner_phone = fields.Char(related='owner_id.phone', readonly=0,
                              store=True)  # related field is like computed field NOT stored in DB
    create_time = fields.Datetime(default=fields.Datetime.now())
    next_time = fields.Datetime(compute='_compute_next_time')

    state = fields.Selection([
        ('draft', 'Draft'),
        ('pending', 'Pending'),
        ('sold', 'Sold'),
        ('closed', 'Closed'),
    ], default='draft')
    active = fields.Boolean(default=1)  # one of reserved fields
    line_ids = fields.One2many('property.line', 'property_id')


    @api.depends('create_time')
    def _compute_next_time(self):
        for rec in self:
            if rec.create_time:
                rec.next_time = rec.create_time + timedelta(hours=6)
            else:
                rec.next_time = False

    @api.constrains('bedrooms')
    def _check_bedrooms_greater_than_zero(self):
        for rec in self:
            if rec.bedrooms == 0:
                raise ValidationError("Please add number of bedrooms :) ")

    def action_draft(self):
        for rec in self:
            rec.create_history_record(rec.state, 'draft')
            rec.state = 'draft'

    def action_pending(self):
        for rec in self:
            rec.create_history_record(rec.state, 'pending')
            rec.state = 'pending'

    def action_sold(self):
        for rec in self:
            rec.create_history_record(rec.state, 'sold')
            rec.state = 'sold'

    def action_closed(self):
        for rec in self:
            rec.create_history_record(rec.state, 'closed')
            rec.state = 'closed'

    def check_expected_selling_date(self):
        property_ids = self.search([])
        for rec in property_ids:
            if rec.expected_selling_date and rec.expected_selling_date < fields.date.today():
                rec.is_late = True

    @api.depends('expected_price', 'selling_price')
    def _compute_diff(self):
        for rec in self:
            print(rec)
            rec.diff = rec.expected_price - rec.selling_price
            print("inside _compute_diff  price")

    @api.onchange('expected_price')
    def _onchange_expected_price(self):
        for rec in self:
            print("inside onchange expected price")
            print(rec)
            return {
                'warning': {'title': 'warning', 'message': 'negative value sir', 'type': 'notification'}
            }

    def action(self):
        print(self.env['property'].search(['|', ('name', '=', 'prop 2'), (
        'postcode', '=', '258')]))  # env may be means enforcing// [('name','OPERATOR','prop 1'),()]

    # to make reference autogenerated using ref
    @api.model
    def create(self, vals):
        res = super(Property, self).create(vals)
        if res.ref == 'New':
            res.ref = self.env['ir.sequence'].next_by_code('property_seq')
            return res

    def create_history_record(self, old_state, new_state, reason=""):
        for rec in self:
            rec.env['property.history'].create({
                'user_id': rec.env.uid,
                'property_id': rec.id,
                'old_state': old_state,
                'new_state': new_state,
                'reason': reason or "",
                # magic tupple ↓↓↓
                'line_ids': [(0, 0, {'description': line.description, 'area': line.area}) for line in rec.line_ids],
            })

    def action_open_change_state_wizard(self):
        action = self.env['ir.actions.actions']._for_xml_id(
            'app_one.change_state_wizard_action')  # _for_xml_id : this method returns id of the action
        action['context'] = {'default_property_id': self.id}

        return action

    def action_open_related_owner(self):  # button name
        action = self.env['ir.actions.actions']._for_xml_id('app_one.owner_action')
        view_id = self.env.ref('app_one.owner_view_form').id  # ref returns view using external id
        action['res_id'] = self.owner_id.id
        action['views'] = [[view_id, 'form']]
        return action

    def get_properties(self):
        payload=dict()
        try:
            response = requests.get('http://127.0.0.1:8069/v1/properties',data=payload)
            if response.status_code == 200 :
                print("Successful")
            else:
                print("Fail ")
        except Exception as error:
            raise ValidationError(str(error))

    def property_xlsx_report(self):
        return {
            'type':'ir.actions.act_url',
            'url' : f'/property/excel/report/{self.env.context.get("active_ids")}',
            'target': 'new'
        }


    # the following is how to override CRUD methods

    # @api.model_create_multi
    # def create(self, vals):
    #     res = super(Property, self).create(vals)
    #     print("inside create method")
    #     return res
    #
    # # _search means READ
    # @api.model
    # def _search(self, domain, offset=0, limit=None, order=None, access_rights_uid=None):
    #     res = super(Property, self)._search(domain, offset=0, limit=None, order=None, access_rights_uid=None)
    #     print("inside read method")
    #     return res
    #
    # def write(self, vals):
    #     res = super(Property, self).write(vals)
    #     print("inside write method")
    #     return res
    #
    # def unlink(self):
    #     res = super().unlink()
    #     print("inside delete method")
    #     return res


class PropertyLine(models.Model):
    _name = "property.line"
    property_id = fields.Many2one('property')
    area = fields.Float()
    description = fields.Char()



